# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: gradle
          
      - name: Check Java version
        run: java -version
        
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Build with Gradle
        run: ./gradlew build
        
      - name: Create DynamoDB Tables
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Check Application Stack Status
        run: |
            source ./setupEnvironment.sh
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $CAPSTONE_APPLICATION_STACK --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DOES_NOT_EXIST")
            echo "Application stack status is: $STACK_STATUS"
            
            if [[ $STACK_STATUS == "ROLLBACK_COMPLETE" || $STACK_STATUS == "CREATE_FAILED" ]]; then
              echo "Stack is in failed state. Deleting stack before redeployment..."
              aws cloudformation delete-stack --stack-name $CAPSTONE_APPLICATION_STACK
              aws cloudformation wait stack-delete-complete --stack-name $CAPSTONE_APPLICATION_STACK
            elif [[ $STACK_STATUS == *"_IN_PROGRESS" ]]; then
              echo "Stack is currently being updated. Waiting for completion..."
              aws cloudformation wait stack-${STACK_STATUS%_IN_PROGRESS}-complete --stack-name $CAPSTONE_APPLICATION_STACK || true
            fi
          
      - name: Check Stack Status
        run: |
            source ./setupEnvironment.sh
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $CAPSTONE_SERVICE_STACK --query "Stacks[0].StackStatus" --output text || echo "DOES_NOT_EXIST")
            echo "Stack status is: $STACK_STATUS"
            if [[ $STACK_STATUS == *"_IN_PROGRESS" ]]; then
              echo "Stack is currently being updated. Waiting for completion..."
              aws cloudformation wait stack-update-complete --stack-name $CAPSTONE_SERVICE_STACK || true
            fi
        
      - name: Deploy DynamoDB Tables
        run: |
          aws cloudformation create-stack --stack-name lambda-instructor-class-table --template-body file://LambdaInstructorLeadClassTable.yml --capabilities CAPABILITY_IAM || true
          aws cloudformation create-stack --stack-name lambda-user-table --template-body file://LambdaUserTable.yml --capabilities CAPABILITY_IAM || true
          aws cloudformation create-stack --stack-name lambda-class-attendance-table --template-body file://LambdaClassAttendanceTable.yml --capabilities CAPABILITY_IAM || true
        
      - name: Deploy Lambda Service
        run: |
          source ./setupEnvironment.sh
          aws s3 mb s3://$CAPSTONE_ARTIFACT_BUCKET || true
          aws cloudformation package --template-file LambdaService-template.yml --s3-bucket $CAPSTONE_ARTIFACT_BUCKET --output-template-file lambda-service.yml
          aws cloudformation deploy --template-file lambda-service.yml --stack-name $CAPSTONE_SERVICE_STACK --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
        
      - name: Deploy Application
        run: |
          source ./setupEnvironment.sh
          aws s3 cp Application/build/libs/Application-0.0.1-SNAPSHOT.jar s3://$CAPSTONE_ARTIFACT_BUCKET/Application-0.0.1-SNAPSHOT.jar
          aws cloudformation deploy --template-file Application-template.yml --stack-name $CAPSTONE_APPLICATION_STACK --capabilities CAPABILITY_NAMED_IAM --parameter-overrides ProjectName=$CAPSTONE_PROJECT_NAME GithubGroupName=$GITHUB_GROUP_NAME ApplicationName=$GITHUB_GROUP_NAME AppS3Key=Application-0.0.1-SNAPSHOT.jar
